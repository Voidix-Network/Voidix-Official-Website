# Nginx配置文件 - Voidix官方网站 (生产版本)
# 适用于静态网站部署，包含性能优化和安全加固
# 部署路径: /etc/nginx/sites-enabled/voidix.conf

# HTTP服务器块1 - 裸域名重定向到HTTPS www
server {
    listen       80;
    listen       [::]:80;
    server_name  voidix.top;
    return 301 https://www.voidix.top$request_uri;
}

# HTTP服务器块2 - www重定向到HTTPS www
server {
    listen       80;
    listen       [::]:80;
    server_name  www.voidix.top;
    return 301 https://www.voidix.top$request_uri;
}

# HTTPS服务器块1 - HTTPS裸域名重定向到HTTPS www
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2;
    server_name  voidix.top;
    
    # SSL证书配置 (为了支持HTTPS重定向)
    ssl_certificate "/etc/nginx/ssl/voidix/fullchain.cer";
    ssl_certificate_key "/etc/nginx/ssl/voidix/voidix.top.key";
      # SSL基础配置 - 与主服务器保持一致
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:VOIDIX_REDIRECT_SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    return 301 https://www.voidix.top$request_uri;
}

# HTTPS服务器块2 - 主服务器 (www.voidix.top)
server {
    listen       443 ssl http2;
    listen       [::]:443 ssl http2;
    server_name  www.voidix.top;
    root         /www/voidix;
    index        index.html;

    # SSL证书配置 (使用您现有的证书路径)
    ssl_certificate "/etc/nginx/ssl/voidix/fullchain.cer";
    ssl_certificate_key "/etc/nginx/ssl/voidix/voidix.top.key";
      # SSL安全配置优化
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:VOIDIX_SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # 安全头部 - 基于Lighthouse最佳做法优化
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Embedder-Policy "credentialless" always;
    add_header Cross-Origin-Resource-Policy "cross-origin" always;
    
    # Content Security Policy
    # 注意：'unsafe-inline'降低安全性，生产环境建议使用nonce或hash替代
    # 示例：script-src 'self' 'nonce-{random}' https://cdnjs.cloudflare.com
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://unpkg.com https:; font-src 'self' https:; img-src 'self' data: https:; connect-src 'self' wss://server.voidix.top:10203 https:;" always;

    # Gzip压缩 - 解决Lighthouse文本压缩建议
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/xml
        image/svg+xml;

    # 静态资源缓存策略 - 解决Lighthouse缓存建议
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 安全头部也适用于静态资源
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
    }

    # HTML文件缓存策略
    location ~* \.html$ {
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }

    # 特殊文件处理
    location = /robots.txt {
        expires 7d;
        add_header Cache-Control "public";
    }
    
    location = /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public";
    }

    # 阻止访问敏感文件
    location ~ /\.(htaccess|htpasswd|git) {
        deny all;
        return 404;
    }
    
    location ~ /memory-bank/ {
        deny all;
        return 404;
    }

    # 主要路由处理
    location / {
        try_files $uri $uri/ =404;
        
        # 防止阻塞渲染 - 解决Lighthouse建议
        add_header Link "</assets/css/style.css>; rel=preload; as=style" always;
        add_header Link "</assets/js/script.js>; rel=preload; as=script" always;
    }

    # HTTP/2服务器推送 - 解决Lighthouse HTTP/2建议
    location = /index.html {
        http2_push /assets/css/style.css;
        http2_push /assets/js/script.js;
        http2_push /assets/js/index-page.js;
    }

    # 错误页面配置
    error_page 404 500 502 503 504 /error.html;
    location = /error.html {
        internal;
        root /www/voidix;
    }

    # 性能优化
    sendfile on;
    tcp_nopush on;    tcp_nodelay on;
    keepalive_timeout 65;
    
    # 连接限制应用（防DDoS基础防护）
    # 这些配置需要在主nginx.conf的http上下文中添加以下内容:
    # http {
    #     limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    #     limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;
    #     ...
    # }
    # 然后在此配置中可以使用：
    # limit_conn conn_limit_per_ip 20;
    # limit_req zone=req_limit_per_ip burst=20 nodelay;

    # 日志配置
    access_log /var/log/nginx/voidix_access.log;
    error_log /var/log/nginx/voidix_error.log;
}
