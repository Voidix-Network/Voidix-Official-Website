name: Advanced PR Deployment Controller

on:
  issue_comment:
    types: [created]
  pull_request_target: # 使用 pull_request_target 以安全地处理标签和获取 PR 详情
    types: [closed]

permissions:
  contents: read
  issues: write       # 用于评论
  pull-requests: write # 用于添加/移除标签

jobs:
  # Job 1: 处理 'deploy' 评论
  handle_deploy_comment:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, 'deploy')
    runs-on: [self-hosted, website]
    outputs:
      should_deploy_immediately: ${{ steps.check_pr_status.outputs.deploy_now }}
      pr_number_for_immediate_deploy: ${{ steps.check_pr_status.outputs.pr_number }}
      commenter_login: ${{ steps.check_permissions.outputs.commenter }}

    steps:
      - name: Check Commenter Permissions
        id: check_permissions
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const authorizedAssociations = ['OWNER', 'MEMBER'];
            const authorAssociation = context.payload.comment.author_association;
            const commenter = context.payload.comment.user.login;
            core.setOutput('commenter', commenter);

            if (!authorizedAssociations.includes(authorAssociation)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ @${commenter}, 您没有足够的权限 (需要 OWNER 或 MEMBER) 来触发部署。您当前的关联是：${authorAssociation}。`
              });
              core.setFailed(`评论者 @${commenter} (${authorAssociation}) 无权操作。`);
              return;
            }
            console.log(`授权评论者: @${commenter} (${authorAssociation})`);

      - name: Get PR Details & Decide Action
        id: check_pr_status
        if: steps.check_permissions.outcome == 'success' # 仅当权限检查通过时运行
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            core.setOutput('pr_number', prNumber);
            const commenter = '${{ steps.check_permissions.outputs.commenter }}';

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });

            if (pr.base.ref !== 'master') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `ℹ️ @${commenter}, 部署命令仅适用于目标为 \`master\` 分支的 PR。此 PR (#${prNumber}) 的目标是 \`${pr.base.ref}\`。`
              });
              core.setFailed('PR 未以 master 为目标。');
              return;
            }

            if (pr.merged && pr.state === 'closed') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `✅ @${commenter}, PR #${prNumber} 已合并到 master。将立即开始部署 master 分支...`
              });
              core.setOutput('deploy_now', 'true');
            } else if (pr.state === 'open') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['deploy-when-merged']
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `⏳ @${commenter}, 已收到部署 PR #${prNumber} 的命令。系统将在 PR 合并到 master 后自动部署。\n标签 'deploy-when-merged' 已添加。`
              });
              core.setOutput('deploy_now', 'false');
            } else { // PR 已关闭但未合并
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `ℹ️ @${commenter}, PR #${prNumber} 已关闭但未合并到 master。无法部署。`
              });
              core.setFailed('PR 已关闭且未合并。');
            }

  # Job 2: 如果 'deploy' 评论在已合并的 PR 上，则立即部署 master
  deploy_master_immediately:
    needs: handle_deploy_comment
    if: success() && needs.handle_deploy_comment.outputs.should_deploy_immediately == 'true'
    runs-on: [self-hosted, website] # 此作业在您的自托管 runner 上运行
    steps:
      - name: Announce Immediate Deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }},
              body: `🚀 @${{ needs.handle_deploy_comment.outputs.commenter_login }}，开始立即部署 master 分支 (因 PR #${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }} 已合并)。\n[查看 Workflow 运行情况](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
      
      - name: Deploy Master Branch (Immediate)
        shell: bash
        env:
          PR_NUMBER: ${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }}
        run: |
          echo "PR #${PR_NUMBER} (已合并) 触发立即部署 master 分支..."
          echo "导航到 /var/www/voidix..."
          cd /var/www/voidix
          if [ $? -ne 0 ]; then echo "错误：无法进入目录 /var/www/voidix。"; exit 1; fi
          
          echo "从 origin 拉取 master 分支的最新更改..."
          git fetch origin master
          if [ $? -ne 0 ]; then echo "错误：git fetch origin master 失败。"; exit 1; fi
          
          echo "检出并将本地 master 分支重置为 origin/master..."
          git checkout -B master origin/master
          if [ $? -ne 0 ]; then echo "错误：git checkout -B master origin/master 失败。"; exit 1; fi
          echo "成功将 /var/www/voidix 更新到 master 分支的最新提交。"
          
          echo "重新加载 Nginx..."
          sudo systemctl reload nginx
          if [ $? -ne 0 ]; then echo "错误：重新加载 Nginx 失败。请检查 sudo 权限。"; exit 1; fi
          echo "Nginx 已成功重新加载。Master 分支已部署完毕。"

      - name: Post Immediate Deployment Success Comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }},
              body: `🎉 @${{ needs.handle_deploy_comment.outputs.commenter_login }}，立即部署成功！master 分支已更新 (因 PR #${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }} 合并)。\n[查看 Workflow 运行日志](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

      - name: Post Immediate Deployment Failure Comment
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }},
              body: `🔥 @${{ needs.handle_deploy_comment.outputs.commenter_login }}，立即部署失败！在更新 master 分支时发生错误 (因 PR #${{ needs.handle_deploy_comment.outputs.pr_number_for_immediate_deploy }} 合并)。\n请检查 [Workflow 运行日志](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})。`
            });

  # Job 3: 如果带有 'deploy-when-merged' 标签的 PR 合并到 master，则部署 master
  deploy_on_merge_if_labelled:
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && contains(join(github.event.pull_request.labels.*.name, ','), 'deploy-when-merged')
    runs-on: [self-hosted, website] # 此作业在您的自托管 runner 上运行
    steps:
      - name: Announce Merge Deployment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `🚀 PR #${{ github.event.pull_request.number }} 已合并到 master 且带有 'deploy-when-merged' 标签。开始部署 master 分支...\n[查看 Workflow 运行情况](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

      - name: Deploy Master Branch (On Merge with Label)
        shell: bash
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "PR #${PR_NUMBER} (合并且带标签) 触发部署 master 分支..."
          echo "导航到 /var/www/voidix..."
          cd /var/www/voidix
          if [ $? -ne 0 ]; then echo "错误：无法进入目录 /var/www/voidix。"; exit 1; fi

          echo "从 origin 拉取 master 分支的最新更改..."
          git fetch origin master
          if [ $? -ne 0 ]; then echo "错误：git fetch origin master 失败。"; exit 1; fi

          echo "检出并将本地 master 分支重置为 origin/master..."
          git checkout -B master origin/master
          if [ $? -ne 0 ]; then echo "错误：git checkout -B master origin/master 失败。"; exit 1; fi
          echo "成功将 /var/www/voidix 更新到 master 分支的最新提交。"

          echo "重新加载 Nginx..."
          sudo systemctl reload nginx
          if [ $? -ne 0 ]; then echo "错误：重新加载 Nginx 失败。请检查 sudo 权限。"; exit 1; fi
          echo "Nginx 已成功重新加载。Master 分支已部署完毕。"

      - name: Remove Label and Post Merge Deployment Success Comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ github.event.pull_request.number }};
            try { // 尝试移除标签，即使失败也继续评论
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                name: 'deploy-when-merged'
              });
            } catch (error) {
              console.error(`移除标签 'deploy-when-merged' 失败: ${error.message}`);
              // 不中断流程，继续评论
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `🎉 部署成功！PR #${prNumber} 合并到 master 的更改已部署。\n标签 'deploy-when-merged' 已尝试移除。\n[查看 Workflow 运行日志](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });

      - name: Post Merge Deployment Failure Comment
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: `🔥 部署失败！在部署 PR #${{ github.event.pull_request.number }} 合并到 master 的更改时发生错误。\n标签 'deploy-when-merged' 仍然存在。请检查问题或手动移除标签后重试。\n请检查 [Workflow 运行日志](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})。`
            }); 